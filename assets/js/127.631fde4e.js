(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{519:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"十-监听文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十-监听文件"}},[t._v("#")]),t._v(" 十.监听文件")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("前言")]),t._v(" "),s("p",[t._v("拥抱现代前端工作流的同学都会有代码风格检查、单元测试等环节，这样就很需要在代码变更之后立即得到反馈，如代码改动导致了那个 Case 失败，哪块不符合团队的编码规范等。")]),t._v(" "),s("p",[t._v("使用 gulp、grunt 的同学，可能对这种功能非常熟悉，不就是 watch 么？确实是，使用 npm script 我们也可以实现类似的功能。下面详细介绍如何改造我们的项目实现单测、代码检查的自动化。")])]),t._v(" "),s("h2",{attrs:{id:"_1-单元测试自动化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-单元测试自动化"}},[t._v("#")]),t._v(" 1. 单元测试自动化")]),t._v(" "),s("p",[t._v("幸运的是，mocha 本身支持 "),s("code",[t._v("--watch")]),t._v(" 参数，即在代码变化时自动重跑所有的测试，我们只需要在 scripts 对象中新增一条命令即可：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("     "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cross-env NODE_ENV=test mocha tests/"')]),t._v(",\n+    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"watch:test"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm t -- --watch"')]),t._v(",\n     "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cover"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node scripts/cover.js"')]),t._v(",\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("尝试运行 npm run watch:test，我们会发现进程并没有退出，接下来尝试去修改测试代码，测试是不是自动重跑了呢？自己试试看。")]),t._v(" "),s("h2",{attrs:{id:"_2-代码检查自动化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码检查自动化"}},[t._v("#")]),t._v(" 2. 代码检查自动化")]),t._v(" "),s("p",[t._v("我们使用的代码检查工具 "),s("a",{attrs:{href:"https://stylelint.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("stylelint"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://eslint.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://github.com/zaach/jsonlint",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsonlint"),s("OutboundLink")],1),t._v(" 不全支持 watch 模式，这里我们需要借助 "),s("a",{attrs:{href:"https://github.com/Qard/onchange",target:"_blank",rel:"noopener noreferrer"}},[t._v("onchange"),s("OutboundLink")],1),t._v(" 工具包来实现，onchange 可以方便的让我们在文件被修改、添加、删除时运行需要的命令。")]),t._v(" "),s("h3",{attrs:{id:"_1-安装项目依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装项目依赖"}},[t._v("#")]),t._v(" 1. 安装项目依赖")]),t._v(" "),s("p",[t._v("使用如下命令安装 onchange 到项目依赖中：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i onchange -D\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# npm install onchange --save-dev")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# yarn add onchange -D")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"_2-添加-npm-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加-npm-script"}},[t._v("#")]),t._v(" 2. 添加 npm script")]),t._v(" "),s("p",[t._v("按照如下提示添加 watch:lint 和 watch 两个子命令：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("+    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"watch"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm-run-all --parallel watch:*"')]),t._v(",\n+    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"watch:lint"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onchange -i '),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("**/*.js"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("**/*.less"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(' -- npm run lint"')]),t._v(",\n     "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"watch:test"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm t -- --watch"')]),t._v(",\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("关于改动的几点说明：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("watch:lint")]),t._v(" 里面的文件匹配模式可以使用通配符，但是模式两边使用了转义的双引号，这样是跨平台兼容的；")]),t._v(" "),s("li",[s("code",[t._v("watch:lint")]),t._v(" 里面的 "),s("code",[t._v("-i")]),t._v(" 参数是让 onchange 在启动时就运行一次 "),s("code",[t._v("--")]),t._v(" 之后的命令，即代码没变化的时候，变化前后的对比大多数时候还是有价值的；")]),t._v(" "),s("li",[t._v("watch 命令实际上是使用了 npm-run-all 来运行所有的 watch 子命令；")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("TIP#15")]),t._v("：有没有好奇过 onchange 是怎么实现文件系统监听的？所有的魔法都藏在它的源代码里面，实际上它使用了跨平台的文件系统监听包 "),s("a",{attrs:{href:"https://github.com/paulmillr/chokidar",target:"_blank",rel:"noopener noreferrer"}},[t._v("chokidar"),s("OutboundLink")],1),t._v("，基于它，你能做点什么有意思的事情呢？")])])])}),[],!1,null,null,null);s.default=e.exports}}]);