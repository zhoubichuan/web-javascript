(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{548:function(t,v,_){"use strict";_.r(v);var l=_(9),i=Object(l.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"浏览器原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器原理"}},[t._v("#")]),t._v(" 浏览器原理")]),t._v(" "),v("ul",[v("li",[t._v("[ ] 1.各浏览器使用的  JavaScript  引擎以及它们的异同点、如何在代码中进行区分")]),t._v(" "),v("li",[t._v("[ ] 2.请求数据到请求结束与服务器进行了几次交互")]),t._v(" "),v("li",[t._v("[ ] 3.可详细描述浏览器从输入  URL  到页面展现的详细过程")]),t._v(" "),v("li",[t._v("[ ] 4.浏览器解析  HTML  代码的原理，以及构建  DOM  树的流程")]),t._v(" "),v("li",[t._v("[ ] 5.浏览器如何解析  CSS  规则，并将其应用到  DOM  树上")]),t._v(" "),v("li",[t._v("[ ] 6.浏览器如何将解析好的带有样式的  DOM  树进行绘制")]),t._v(" "),v("li",[t._v("[ ] 7.浏览器的运行机制，如何配置资源异步同步加载")]),t._v(" "),v("li",[t._v("[ ] 8.浏览器回流与重绘的底层原理，引发原因，如何有效避免")]),t._v(" "),v("li",[t._v("[ ] 9.浏览器的垃圾回收机制，如何避免内存泄漏")]),t._v(" "),v("li",[t._v("[ ] 10.浏览器采用的缓存方案，如何选择和控制合适的缓存方案")])])])}),[],!1,null,null,null);v.default=i.exports}}]);