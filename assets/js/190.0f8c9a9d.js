(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{596:function(s,t,a){"use strict";a.r(t);var n=a(9),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"三-npm-的参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-npm-的参数"}},[s._v("#")]),s._v(" 三.npm 的参数")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("前言")]),s._v(" "),t("p",[s._v("给 npm script 传递参数以减少重复的 npm script，增加注释提高 npm script 脚本的可读性，控制运行时日志输出能让你专注在重要信息上")])]),s._v(" "),t("h2",{attrs:{id:"_1-传递参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-传递参数"}},[s._v("#")]),s._v(" 1. 传递参数")]),s._v(" "),t("p",[s._v("eslint 内置了代码风格自动修复模式，只需给它传入 "),t("code",[s._v("--fix")]),s._v(" 参数即可，在 scripts 中声明检查代码命令的同时你可能也需要声明修复代码的命令，面对这种需求，大多数同学可能会忍不住复制粘贴，如下：")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// package.json")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"lint:js"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eslint *.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"lint:js:fix"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eslint *.js --fix"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("在 "),t("code",[s._v("lint:js")]),s._v(" 命令比较短的时候复制粘贴的方法简单粗暴有效，但是当 "),t("code",[s._v("lint:js")]),s._v(" 命令变的很长之后，难免后续会有人改了 "),t("code",[s._v("lint:js")]),s._v(" 而忘记修改 "),t("code",[s._v("lint:js:fix")]),s._v("，更健壮的做法是，在运行 npm script 时给定额外的参数，代码修改如下：")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// package.json")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"lint:js"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eslint *.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"lint:js:fix"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm run lint:js -- --fix"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("要格外注意 "),t("code",[s._v("--fix")]),s._v(" 参数前面的 "),t("code",[s._v("--")]),s._v(" 分隔符，意指要给 "),t("code",[s._v("npm run lint:js")]),s._v(" 实际指向的命令传递额外的参数。")]),s._v(" "),t("p",[s._v("上图第 2 个红色框里面是实际执行的命令，可以看到 "),t("code",[s._v("--fix")]),s._v(" 参数附加在了后面。")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),t("p",[s._v("如果你不想单独声明 "),t("code",[s._v("lint:js:fix")]),s._v(" 命令，在需要的时候直接运行： "),t("code",[s._v("npm run lint:js -- --fix")]),s._v(" 来实现同样的效果。")])]),s._v(" "),t("p",[s._v("同理可以给 mocha 命令增加 "),t("code",[s._v("--watch")]),s._v(" 模式方便在开发时立即看到测试结果")]),s._v(" "),t("h2",{attrs:{id:"_2-添加注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加注释"}},[s._v("#")]),s._v(" 2. 添加注释")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("//")])])]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"//"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"运行所有代码检查和单元测试"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"test"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm-run-all --parallel lint:* mocha"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[s._v("在命令前面加上注释")])]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"//"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"运行所有代码检查和单元测试"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"test"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm-run-all --parallel lint:* mocha"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"test"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"# 运行所有代码检查和单元测试 \\n    npm-run-all --parallel lint:* mocha"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("注意注释后面的换行符 "),t("code",[s._v("\\n")]),s._v(" 和多余的空格，换行符是用于将注释和命令分隔开，这样命令就相当于微型的 shell 脚本，多余的空格是为了控制缩进，也可以用制表符 "),t("code",[s._v("\\t")]),s._v(" 替代。这种做法能让 npm run 列出来的命令更美观，但是 scripts 声明阅读起来不那么整齐美观。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/27/15ffa72c247900f5?w=846&h=412&f=png&s=54745",alt:""}})]),s._v(" "),t("p",[s._v("上面两种方式都有明显的缺陷，个人建议的更优方案还是把复杂的命令剥离到单独的文件中管理，在单独的文件中可以自由给它添加注释。")]),s._v(" "),t("h2",{attrs:{id:"_3-日志输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-日志输出"}},[s._v("#")]),s._v(" 3. 日志输出")]),s._v(" "),t("p",[s._v("在运行 npm script 出现问题时你需要有能力去调试它，某些情况下你需要让 npm script 以静默的方式运行，这类需求可通过控制运行时日志输出级别来实现。")]),s._v(" "),t("p",[s._v("日志级别控制参数有好几个，简单举例如下：")]),s._v(" "),t("h3",{attrs:{id:"默认日志输出级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认日志输出级别"}},[s._v("#")]),s._v(" 默认日志输出级别")]),s._v(" "),t("p",[s._v("即不加任何日志控制参数得到的输出，可能是你最常用的，能看到执行的命令、命令执行的结果。")]),s._v(" "),t("h3",{attrs:{id:"显示尽可能少的有用信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显示尽可能少的有用信息"}},[s._v("#")]),s._v(" 显示尽可能少的有用信息")]),s._v(" "),t("p",[s._v("结合其他工具调用 npm script 的时候比较有用，需要使用 "),t("code",[s._v("--loglevel silent")]),s._v("，或者 "),t("code",[s._v("--silent")]),s._v("，或者更简单的 "),t("code",[s._v("-s")]),s._v(" 来控制，这个日志级别的输出实例如下（只有命令本身的输出，读起来非常的简洁）：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/27/15ffa73279c8a9e8?w=782&h=232&f=png&s=20452",alt:""}})]),s._v(" "),t("p",[s._v("如果执行各种 lint script 的时候启用了 "),t("code",[s._v("-s")]),s._v(" 配置，代码都符合规范的话，你不会看到任何输出，这就是"),t("strong",[s._v("没有消息是最好的消息")]),s._v("的由来，哈哈！")]),s._v(" "),t("h3",{attrs:{id:"显示尽可能多的运行时状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显示尽可能多的运行时状态"}},[s._v("#")]),s._v(" 显示尽可能多的运行时状态")]),s._v(" "),t("p",[s._v("排查脚本问题的时候比较有用，需要使用 "),t("code",[s._v("--loglevel verbose")]),s._v("，或者 "),t("code",[s._v("--verbose")]),s._v("，或者更简单的 "),t("code",[s._v("-d")]),s._v(" 来控制，这个日志级别的输出实例如下（详细打印出了每个步骤的参数、返回值，下面的截图只是部分）：")])])}),[],!1,null,null,null);t.default=r.exports}}]);